#!/usr/bin/env ruby2.0

require 'erb'
require 'pathname'
require 'fileutils'
require 'digest'

class Pathname
  # Homebrew inspired hack for pretty-looking paths
  alias / +

  # Backport Ruby 2.1 Pathname#write
  unless respond_to? :write
    def write(s)
      File.open(to_path, "w") do |f|
        f.write(s)
      end
    end
  end
end

class NginxConfig
  attr_reader :hosts

  ERB_PATH = File.expand_path("../nginx-default.conf.erb", __dir__)

  def initialize(hosts)
    @hosts = hosts.sort_by(&:first)
  end

  def domain
    "net.hackerschool.com"
  end

  def contents
    unless defined?(@contents)
      erb = ERB.new(File.read(ERB_PATH))
      @contents = erb.result(binding)
    end

    @contents
  end
  alias to_s contents
end

class ConfigCache
  CACHE_DIR = Pathname.new(File.expand_path("../cache", __dir__))

  def initialize
    CACHE_DIR.mkpath
  end

  def include?(obj)
    (CACHE_DIR/filename(obj.to_s)).exist?
  end

  def store(obj)
    s = obj.to_s

    write(s) unless include?(s)
  end

  def path(obj)
    path_name(obj.to_s).to_s
  end

private

  def path_name(s)
    CACHE_DIR/filename(s)
  end

  def write(s)
    path = path_name(s)
    path.write(s)

    path.to_s
  end

  def filename(s)
    digest(s) + ".conf"
  end

  def digest(s)
    Digest::SHA256.hexdigest(s)
  end
end

cache = ConfigCache.new

config = NginxConfig.new(
  [
    ["foo", "https://www.google.com"],
    ["bar", "https://codewords.recurse.com"],
    ["baz", "https://github.com"],
    ["hmm", "https://example.com"]
  ]
)

SYMLINK_LOCATION = "/etc/nginx/sites-available/default"

if loc = cache.store(config)
  puts "Wrote to cache: #{loc}"
end

path = cache.path(config)

unless File.readlink(SYMLINK_LOCATION) == path
  puts "Linking new nginx conf: #{path}"
  FileUtils.ln_sf(path, SYMLINK_LOCATION)

  system("service nginx reload")
end
